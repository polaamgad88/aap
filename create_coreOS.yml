---
- name: provision vcenter playbook
  hosts: localhost
  vars:
    cluster_name: "MFPA"
    masters_count: 3
    workers_count: 3
    is_compact: false
  vars_files:
    - vars/vcenter_vars.yml
    - vcenter_secrets.yml
  tasks:
    - name: Align masters_count in compact
      set_fact:
        masters_count: "{{ workers_count }}"
      when: is_compact | bool

    - name: Build vm_names compact
      set_fact:
        vm_names: []
      when: is_compact | bool

    - name: Add compact names
      set_fact:
        vm_names: "{{ vm_names + ['master_worker_' ~ item ~ '_' ~ cluster_name] }}"
      with_sequence: start=1 end="{{ workers_count }}"
      when: is_compact | bool

    - name: Build vm_names separate
      set_fact:
        vm_names: []
      when: not is_compact | bool

    - name: Add master names
      set_fact:
        vm_names: "{{ vm_names + ['master_' ~ item ~ '_' ~ cluster_name] }}"
      with_sequence: start=1 end="{{ masters_count }}"
      when: not is_compact | bool

    - name: Add worker names
      set_fact:
        vm_names: "{{ vm_names + ['worker_' ~ item ~ '_' ~ cluster_name] }}"
      with_sequence: start=1 end="{{ workers_count }}"
      when: not is_compact | bool

    - name: show the final vm names
      debug:
        var: vm_names
    - name: create marawan folder
      community.vmware.vcenter_folder:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: "{{ validate_certs }}"
        datacenter_name: "{{ datacenter_name }}"
        folder_name: "{{ folder_name }}"
        state: present
      register: result

    - name: Display creating folder results
      debug:
        var: result

    - name: Find folder by name
      vmware.vmware_rest.vcenter_folder_info:
        vcenter_hostname: "{{ vcenter_hostname }}"
        vcenter_username: "{{ vcenter_username }}"
        vcenter_password: "{{ vcenter_password }}"
        vcenter_validate_certs: "{{ validate_certs }}"
        names: "{{ folder_name }}"
      register: folder_info

    - name: print folder info that is retrieved
      debug:
        msg: "{{ folder_info }}"

    - name: Gather information about datastores
      vmware.vmware_rest.vcenter_datastore_info:
        vcenter_hostname: "{{ vcenter_hostname }}"
        vcenter_username: "{{ vcenter_username }}"
        vcenter_password: "{{ vcenter_password }}"
        vcenter_validate_certs: "{{ validate_certs }}"
        names: Pure-Datastore
      register: datastore_info

    - name: Display datastore information
      debug:
        var: datastore_info

    - name: Create a content library based on a DataStore
      vmware.vmware_rest.content_locallibrary:
        vcenter_hostname: "{{ vcenter_hostname }}"
        vcenter_username: "{{ vcenter_username }}"
        vcenter_password: "{{ vcenter_password }}"
        vcenter_validate_certs: "{{ validate_certs }}"
        name: coreOS_content_library
        description: here i will save the template for CoreOS to be used by the aap
        publish_info:
          published: true
          authentication_method: NONE
        storage_backings:
          - datastore_id: "{{ datastore_info.value[0].datastore }}"
            type: DATASTORE
        state: present
      register: cont_lib

    - name: print content library info that is retrieved
      debug:
        var: cont_lib

    - name: Get Templates From Content Library
      vmware.vmware.content_library_item_info:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: "{{ validate_certs }}"
        library_name: coreOS_content_library
      register: Templates_Items_info

    - name: show Templates_Items_info
      debug:
        var: Templates_Items_info

    - name: Build a list of all the clusters
      vmware.vmware_rest.vcenter_cluster_info:
        vcenter_hostname: "{{ vcenter_hostname }}"
        vcenter_username: "{{ vcenter_username }}"
        vcenter_password: "{{ vcenter_password }}"
        vcenter_validate_certs: "{{ validate_certs }}"
      register: all_the_clusters

    - name: Retrieve details about the clusters
      debug:
        msg: "{{ all_the_clusters }}"

    - name: Get the existing resource pools
      vmware.vmware_rest.vcenter_resourcepool_info:
        vcenter_hostname: "{{ vcenter_hostname }}"
        vcenter_username: "{{ vcenter_username }}"
        vcenter_password: "{{ vcenter_password }}"
        vcenter_validate_certs: "{{ validate_certs }}"
      register: resource_pools

    - name: Get the dvswitch called VM Network
      vmware.vmware_rest.vcenter_network_info:
        vcenter_hostname: "{{ vcenter_hostname }}"
        vcenter_username: "{{ vcenter_username }}"
        vcenter_password: "{{ vcenter_password }}"
        vcenter_validate_certs: "{{ validate_certs }}"
        names: VM Network
      register: my_networks

    - name: Retrieve details about networks
      debug:
        msg: "{{ my_networks }}"

    - name: set id of the item
      set_fact:
        item_id: "{{ (Templates_Items_info.library_item_info | selectattr('name', 'match', '^rhcos') | selectattr('type', 'equalto', 'ovf') | first).id }}"

    - name: show id of the item
      debug:
        var: item_id

    - name: Deploy CoreOS VMs from OVF
      vmware.vmware_rest.vcenter_ovf_libraryitem:
        vcenter_hostname: "{{ vcenter_hostname }}"
        vcenter_username: "{{ vcenter_username }}"
        vcenter_password: "{{ vcenter_password }}"
        vcenter_validate_certs: "{{ validate_certs }}"
        ovf_library_item_id: "{{ item_id }}"
        state: deploy
        session_timeout: 1500
        target:
          folder_id: "{{ folder_info.value[0].folder }}"
          resource_pool_id: "{{ resource_pools.value[0].resource_pool }}"
        deployment_spec:
          name: "{{ item }}"
          accept_all_EULA: true
          storage_provisioning: thin
          network_mappings:
            "VM Network": "{{ my_networks.value[0].network }}"
      loop: "{{ vm_names }}"
